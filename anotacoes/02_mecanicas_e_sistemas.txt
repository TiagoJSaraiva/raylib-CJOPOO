### Mecânicas e Sistemas

1. Mecânica central
    - **Objetivo imediato**
       - Limpar a sala atual eliminando todos os inimigos ativos para reabrir as portas e escolher o próximo caminho.
    - **Ações básicas**
       - Movimentar-se livremente com WASD (top-down isométrico).
       - Mirar com o mouse; botão esquerdo dispara a arma equipada na mão esquerda, botão direito a da mão direita. Se ambos forem pressionados, a primeira entrada registrada define qual arma dispara.
       - Click simples realiza um disparo; segurar mantém fogo contínuo quando a arma permitir.
       - Interagir com portas, drops e pontos especiais aproximando-se e acionando a entrada de interação (tecla padrão "E" ou clique direto na entidade). Abrir menu rápido/inventário via hotkeys dedicadas (detalhamento completo ficará na seção 5 — Inputs e controles).
    - **Fluxo de sala**
       - Ao entrar, portas se selam e a HUD destaca objetivos ativos.
       - Inimigos surgem de imediato (ou após breve teleporte). O jogador precisa usar armas e habilidades para reduzir o HP de cada inimigo a zero.
       - Quando todos os inimigos forem derrotados:
          - Portas se abrem (exceto a porta de retorno ao menu).
          - Drops surgem no piso conforme tabelas de loot da sala.
          - O jogador pode revisitar salas anteriores ou avançar para novas salas/biomas.
    - **Condições de sucesso/falha**
       - Sucesso: sala limpa → portas liberadas → possibilidade de acessar salas normais, especiais (forja, loja) ou chefes.
       - Falha: HP do jogador chega a zero → run termina, efeito de retorno ao menu (animação a definir) e exibição de estatísticas (lista de métricas ainda a definir; apontado como pendência).
    - **Feedback audiovisual**
       - Sons distintos para cada ação (movimento, disparo, acerto em inimigos, dano recebido, uso de habilidade, interação, crafting em forja).
       - Efeitos visuais para dano (flash, números flutuantes), barreiras ativadas nas portas, animações de morte dos inimigos.
       - Trilha sonora dinâmica que muda conforme o bioma; fanfares curtas ao limpar uma sala ou derrotar chefe.
       - HUD exibe barras de vida/armadura, munição/recarga das armas equipadas e indicadores de habilidades disponíveis.
    - **Pendências registradas**
       - Definir a lista exata de estatísticas exibidas no fim da run.
       - Definir animação/efeito de retorno ao menu ao morrer.

2. Mecânicas secundárias
    - **2.1 Porta inicial (menu → run)**
       - Começa fechada; ao interagir, reproduz animação do personagem atravessando e sela a passagem de volta. Teleporta para a primeira sala do bioma inicial. Permanece inacessível até o fim da run.
       - Primeiro bioma da run é escolhido aleatoriamente dentre os biomas desbloqueados no momento da entrada na porta do lobby.
    - **2.2 Portas padrão de sala**
       - Entradas não trancadas permanecem fechadas/inativas enquanto houver inimigos vivos. Ao limpar a sala, todas se abrem simultaneamente.
       - Ao cruzar uma porta que leva a uma sala com inimigos, ela (e as demais saídas) selam novamente até a limpeza da nova sala.
       - Salas sem combate (loja, forja, puzzles, checkpoints de história) mantêm portas abertas por padrão.
    - **2.3 Portas trancadas e barreiras especiais**
       - Exigem item específico (chaves, códigos, runas) ou atributo mínimo (ex.: inteligência) para liberar.
       - Após desbloqueio, passam a seguir o comportamento das portas padrão naquela run.
    - **2.4 Loja de bioma**
       - Um NPC comerciante (visual varia conforme bioma) fica posicionado no centro da sala; interagir com ele via hotkey/mouse abre uma interface dedicada de inventário com itens à venda expostos em slots centrais.
       - Comprar consome moedas e coloca o item diretamente na mochila (ou no chão se estiver cheia); falta de moedas gera feedback negativo (som, fala do comerciante).
       - O jogador pode vender itens da mochila enquanto a interface da loja estiver aberta: selecionar o item, clicar em “Vender” e receber 80% do preço base registrado no item.
       - Rerrolar estoque será uma habilidade desbloqueada futuramente via metaprogressão no menu (fora do escopo do protótipo inicial).
    - **2.5 Sala de baú**
       - Porta trancada por padrão; requer chave, item especial ou condição definida para abrir.
       - Interior fixo por bioma: sala pequena, sem inimigos, com único baú central usando sprite tematizado.
       - Interagir com o baú via clique ou tecla `E` abre animação e concede item sorteado a partir de uma pool específica (a definir na implementação).
       - Sem objetos aleatórios adicionais; decoração e layout permanecem consistentes para cada bioma.
    - **2.6 Forja**
       - Estrutura central interagível abre interface especial: slots em triângulo para combinar 2 itens + aporte de moedas.
       - Slots mostram feedback visual (borda verde/vermelha) indicando se a combinação é válida. Combinações inválidas não permitem forjar, independente da quantia de moedas.
       - Moedas investidas aumentam a chance de sucesso; combinações de raridade alta exigem mais moedas para atingir probabilidades altas.
       - Ao confirmar na bigorna, animação indica sucesso/fracasso. Sucesso gera item resultante em slot de saída para arrastar ao inventário.
   - Visual pode variar por bioma futuramente (por ora, sprite genérico).
   - Falha na forja: se a tentativa de combinação não tiver sucesso, a bigorna daquela sala quebra e fica inutilizável pelo restante da run (ametaprogressão futura pode permitir reparo).
   - **2.7 Loot e inspeção de itens**
      - Drops ficam no chão até serem coletados; o jogador precisa passar por cima do item/moeda para automaticamente adicioná-los ao inventário ou contador (moedas).
      - Passar o mouse revela atributos, raridade e habilidades (ativa/passiva) em tooltip.
       - Itens colocados em slots de armadura aplicam efeitos; itens na mochila não geram bônus até equipados. Detalhes adicionais serão expandidos na seção de sistemas (inventário/economia).
   - **2.8 Chefes**
       - Salas seguem regras de combate padrão, mas com único inimigo de alta dificuldade, padrões telegráficos e loot especial (itens raros, blueprints, chaves de bioma).
   - **2.9 Armas e projéteis**
       - Cada arma define padrões de projéteis (quantidade, cadência, velocidade, tipo/elemento). Arquitetura planejada com classes derivadas para comportamentos distintos.
   - **2.10 Habilidades ativas**
       - Itens equipados podem conceder habilidades acionadas via hotkeys (1–5, R, T). Podem ser ofensivas, defensivas ou de movimentação; efeitos detalhados por item.
       - Exemplo (espada longa inicial): habilidade “Bloqueio” confere +20 de armadura por 10s sem poder atacar; cooldown de 30s.
   - **2.11 Habilidades passivas**
       - Conforme itens equipados, concedem efeitos contínuos (status, bônus a atributos, alterações em armas). Descrições completas ficarão na documentação de itens.
       - Exemplo (amuleto do guardião, item inicial raro): +3 vigor; 10% de chance de curar 1% da vida máxima ao eliminar inimigo.

3. Sistemas de suporte
    - **3.1 Inventário e equipamentos**
       - Estrutura: mochila com 10 espaços (expansível futuramente), slots de mão direita/esquerda para armas e 5 slots de armadura que aplicam atributos e habilidades dos itens equipados.
       - Interações principais: arrastar/soltar entre slots, equipar/des-equipar, descartar para o chão, inspecionar via tooltip ao passar o mouse.
       - Overflow: compras ou drops extras surgem no chão caso a mochila esteja cheia.
       - Pendências: confirmar se haverá cofres ou armazenamento temporário; definir layout visual final do inventário.

    - **3.2 Economia e moedas**
       - Moeda principal é temporária por run; zera ao retornar ao menu.
       - Fontes atuais: inimigos derrotados, objetos destrutíveis, salas especiais (loja, forja), recompensas de chefes.
       - Gastos principais: compra de itens na loja, investimento em combinações na forja.
       - Pendências: especificar custos médios por raridade; definir moedas persistentes/metaprogressão (planejado para depois do protótipo).

    - **3.3 Loot, raridades e blueprints**
       - Raridades: comum, incomum, raro, épico, lendário, mítico (impactam atributos e chance de drop).
      - Drops: inimigos normais podem fornecer itens/moedas; chefes garantem loot raro e chance de blueprint; objetos destruíveis podem gerar recursos.
      - Sistema de drops será orientado a dados (tabelas configuráveis por inimigo/bioma com itens possíveis, chances e quantidade de moedas) para facilitar balanceamento.
      - Blueprints de armas são raros e persistem entre runs; necessários para forjar armas específicas.
      - Pendências: criar tabelas externas de drop por bioma/inimigo, definir formato (JSON/CSV) e fórmulas de chance na forja; preencher valores numéricos de atributos; elaborar diagramas UML de itens e inimigos para orientar classes.

    - **3.4 Geração de salas e biomas**
       - Biomas planejados: Caverna, Dungeon, Mansão (ordem aleatória; repetição gera versões II, III com dificuldade maior). 
       - Seleção procedural deve considerar probabilidade de salas normais vs especiais (loja, forja, chefe) e garantir revisita às salas limpas.
       - Estado das salas visitadas precisa ser armazenado para permitir retorno e interação pós-luta.
       - Tipos especiais de sala:
          - Salas de chefe, loja, forja, puzzle (fora do protótipo inicial) e baú têm layout/objetos definidos manualmente no código, sem variação procedural de formato ou decoração.
          - Sala de baú: porta trancada, contém apenas um baú central com sprite próprio por bioma; interação por clique ou `E` abre o baú e sorteia item de uma pool específica (definição posterior).
       - **Algoritmo de geração da sala (estrutura e layout)**:
          - Representar cada sala em uma grade regular de "quadrados" (tiles) que delimita posições válidas de portas, paredes internas e objetos; essa abordagem simplifica colisão e evita colocar elementos em pixels arbitrários.
          - Sortear dimensões (largura e altura) dentro de um intervalo mínimo/máximo definido por bioma. As dimensões sorteadas são convertidas para número de tiles, respeitando proporção mínima para comportar portas e áreas de combate.
          - Determinar a quantidade de portas (1 a 3) de forma aleatória ponderada, garantindo conectividade do grafo de salas. Portas são alinhadas à grade e posicionadas em paredes distintas sempre que possível.
          - Antes de fixar uma porta, validar se o lado escolhido aponta para uma coordenada ainda livre no grafo global de salas; se a próxima sala potencial já existir (ou estiver reservada), descartar a porta ou tentar outra direção para evitar sobreposição.
          - Ao gerar uma nova sala adjacente, verificar se a área proposta (bounding box baseada no tamanho em tiles) não colide com salas existentes. Se todas as direções estiverem bloqueadas, registrar a sala como beco sem saída e não criar portas adicionais nela.
          - A geração física da sala é disparada quando o jogador se aproxima a uma sala de distância: a sala atual e todas as vizinhas diretas permanecem instanciadas/renderizadas; salas vizinhas das vizinhas são mantidas apenas na camada lógica (dados prontos) e usam lazy loading para reaplicar meshes/objetos quando o jogador avança.
          - Gerar paredes/obstáculos internos, enfeites e objetos quebráveis com base em pesos por bioma. O posicionamento utiliza o grid para bloquear tiles específicos, deixando corredores transitáveis conforme regras de densidade.
          - Calcular o limite de cada objeto pelo tamanho da sala: muitos = 1 objeto/100 tiles, médio = 1/200 tiles, poucos = 1/300 tiles (valores calibrados posteriormente). Aplicar um gerador pseudoaleatório determinístico (seed global + id da sala) para repetir o layout caso necessário.
          - Registrar no estado da sala os elementos fixos colocados (paredes internas, objetos com/sem hitbox) para reaproveitar o layout em revisitas sem reprocessar a geração.
       - **Algoritmo de spawn de inimigos (por sala)**:
          - Calcular a área útil da sala renderizada (em px²) e utilizar esse valor para definir a quantidade de inimigos alvo, partindo da proporção base de 1 inimigo para cada 100 px² (arredondando para o inteiro mais próximo, respeitando limites mínimos/máximos por bioma conforme balanceamento).
          - Para cada sala, sortear coordenadas válidas dentro da área jogável utilizando um gerador pseudoaleatório determinístico (seed da run + identificador da sala) para garantir reprodutibilidade.
          - Selecionar inimigos a partir da lista do bioma atual excluindo chefes, distribuindo-os até atingir a contagem alvo: aplicar pesos por dificuldade se necessário e garantir que nenhum tipo represente mais da metade do total da sala.
         - Registrar apenas os dados necessários ao spawn inicial (seed usada e composição sorteada) para que a sala permaneça vazia após limpa; revisitas não geram novos inimigos salvo casos especiais definidos manualmente.
       - **Probabilidades de tipo de sala ao descobrir portas**:
          - Sala normal: começa com 79% de chance; diminui 0,5 p.p. para cada nova sala criada até o primeiro chefe aparecer.
          - Sala de forja: 5%.
          - Sala de loja: 5%.
          - Sala de baú (trancada): 10%.
          - Sala de chefe: 1%; aumenta 0,5 p.p. a cada sala nova descoberta até que uma sala de chefe seja instanciada, momento em que volta a 0% e a sala normal retorna a 80%.
          - Puzzle permanece fora do protótipo inicial, portanto sem probabilidade ativa por enquanto.
       - **Pool inicial de objetos por bioma**:
          - Tabela de referência (valores ajustáveis; drops indicam chance por tentativa individual):

            | Nome             | Tipo       | Drops                                                             | Bioma   | Localização preferencial    | Tamanho (tiles) | Hitbox            | Limite base |
            |------------------|------------|--------------------------------------------------------------------|---------|------------------------------|-----------------|-------------------|-------------|
            | Vaso de barro    | Quebrável | 20% 1 moeda · 79,5% nada · 0,5% blueprint aleatório                | Caverna | Próximo às paredes          | 1×1             | Bloqueia passagem | Muitos      |
            | Vaso velho       | Quebrável | 20% 1 moeda · 79,5% nada · 0,5% blueprint aleatório                | Caverna | Próximo às paredes          | 1×1             | Bloqueia passagem | Muitos      |
            | Rocha pequena    | Enfeite   | —                                                                  | Caverna | Qualquer lugar              | 3 tiles         | Bloqueia passagem | Médio       |
            | Rocha grande     | Enfeite   | —                                                                  | Caverna | Qualquer lugar              | 6 tiles         | Bloqueia passagem | Poucos      |
            | Esqueleto mural  | Enfeite   | —                                                                  | Dungeon | Fixado nas paredes          | 1×1             | Sem hitbox        | Médio       |
            | Mesa de tortura  | Enfeite   | —                                                                  | Dungeon | Regiões centrais            | 6 tiles         | Bloqueia passagem | Poucos      |
            | Vaso chique      | Quebrável | 20% 1 moeda · 79,5% nada · 0,5% blueprint aleatório                | Mansão  | Qualquer lugar              | 1×1             | Bloqueia passagem | Muitos      |
            | Candelabro       | Enfeite   | —                                                                  | Mansão  | Próximo às paredes          | 1×1             | Bloqueia passagem | Médio       |
            | Tapete           | Enfeite   | —                                                                  | Mansão  | Regiões centrais            | 6 tiles         | Sem hitbox        | Poucos      |

          - Conversão de limites: muitos = 1 item/100 tiles, médio = 1/200 tiles, poucos = 1/300 tiles (ajustar após medir escala real). Distribuir objetos respeitando restrições de localização e evitando bloqueio completo de caminhos principais.
       - Pendências: definir algoritmo de distribuição (grafo fixo vs geração procedural), porcentagens de spawn de sala especial e lógica para desbloqueio de biomas.

    - **3.5 IA de inimigos e chefes**
       - Inimigos comuns: comportamento de perseguição ao avistar o jogador, ataques corpo a corpo ou projéteis simples, padrões variados por espécie.
       - Chefes: padrões telegráficos múltiplos, fases com escalonamento de dificuldade, utilizações específicas de área/ambiente.
       - Necessidades técnicas: detecção de visão/alcance, pathfinding simples (grid ou steering), sistema de telegraph audiovisual.
      - Pendências: definir comportamentos individuais por inimigo e lógica de coordenação em grupos; alinhar essas definições com a tabela data-driven de inimigos.

    - **3.6 Física e movimentação**
       - Movimentação top-down com velocidade base; considerar aceleração/desaceleração suaves para sensação responsiva.
       - Colisão com paredes, portas e objetos; alguns objetos serão destrutíveis (barris, potes) gerando loot.
       - Knockback e efeitos de status (lentidão, stun) afetarão posicionamento; precisam interagir com colisão/limites da sala.
       - Pendências: valores numéricos de velocidade/knockback; decidir se haverá física baseada em grid ou contínua.

    - **3.7 UI e HUD**
       - HUD padrão mostra barras de vida/armadura, munição ou estado de recarga das armas, cooldown das habilidades ativas (slots 1–5, R, T), quantidade de moedas e minimapa simplificado das salas descobertas.
   - Minimapa: visão isométrica plana (wireframe) das salas já visitadas, com ícones indicando tipo de sala, portas não exploradas (seta vazada) e portas trancadas (cadeado estilizado), além de coloração por bioma (ex.: Caverna — cinza claro; Dungeon — azul escuro; Mansão — roxo escuro; fundo preto/transparente a definir). Toggle rápido pela tecla `M` para exibir/ocultar.
       - Mapa ampliado: acessível a partir do inventário por um botão dedicado; abre sobreposição com o mapa completo e legendas (layout será detalhado nos mockups).
       - Interface contextual abre inventário (slots completos), menu de forja (triângulo de combinação), loja (produtos com preços) e mapa ampliado.
      - Mockups iniciais estão registrados no documento externo “mockups”; usar como referência visual nas próximas iterações.
       - Feedbacks visuais: indicadores de porta trancada, highlight em itens no chão, mensagens pop-up para erros (sem moedas, inventário cheio).
      - Pendências: layout final das telas, estilo de tooltip, localização dos elementos no modo isométrico; mockups em PNG serão fornecidos na etapa de arte/produção.

    - **3.8 Save e metaprogressão (fora do protótipo inicial)**
       - Dados a persistir futuramente: blueprints desbloqueados, habilidades do menu (ex.: rerrol na loja), melhorias permanentes de inventário/armadura.
       - Configurações de input/hotkeys customizadas e opções de acessibilidade devem ser salvas fora das runs.
       - Pendências: decidir formato de arquivo (JSON, binário), frequência de save e ícones/feedback ao salvar.

      - **3.9 Atributos e escalas**
          - Visão geral: armas e habilidades escalam com atributos específicos. Jogador e inimigos compartilham os mesmos atributos principais e de ataque; atributos secundários, por enquanto, aplicam-se apenas ao jogador. Armas equipadas por inimigos são instâncias das mesmas classes de armas, com valores balanceados para dificuldade.

          - **Atributos principais**
             - Poder — aumenta em porcentagem o dano causado por armas e habilidades em geral.
             - Defesa — determina a porcentagem de redução de dano recebida; fórmula com retorno decrescente (curva logarítmica) para evitar invulnerabilidade.
             - Vigor — controla a vida máxima do personagem.
             - Velocidade — afeta a velocidade de deslocamento.
             - Destreza — aumenta os ataques por segundo (cadência) das armas.
             - Inteligência — requisito para portas/puzzles e reduz recarga de habilidades em porcentagem.

          - **Atributos de ataque (atributos-chave de armas)**
             - Constituição — escala dano de armas cujo atributo chave é Constituição.
             - Força — escala dano de armas cujo atributo chave é Força.
             - Foco — escala dano de armas cujo atributo chave é Foco.
             - Misticismo — escala dano de armas cujo atributo chave é Misticismo.
             - Conhecimento — escala dano de armas cujo atributo chave é Conhecimento.

          - **Atributos secundários** (jogador)
             - Vampirismo — chance (%) de recuperar vida ao eliminar um oponente.
             - Letalidade — aumenta chance de golpes críticos. Cada arma define chance base e ganho adicional por ponto de Letalidade, além do multiplicador aplicado ao dano crítico.
             - Redução de dano — valor fixo subtraído do dano recebido (mínimo de 1 ponto de dano passa).
             - Desvio — chance (%) de evitar automaticamente um ataque recebido.
             - Alcance de coleta — aumento (%) no raio de coleta de moedas e itens (também pode ser ampliado por itens/metaprogressão).
             - Sorte — aumento (%) na chance de encontrar mais moedas e itens.
             - Maldição — aumento (%) nos atributos dos inimigos (usado para efeitos de risco/recompensa).

          - **Extensões futuras**
             - Atributos elementais (físico, fogo, terra, vento, água, luz, morte etc.) que ampliarão dano e resistência por elemento. Não previstos para o protótipo inicial; serão detalhados quando ativados.

          - **Atributos de armas**
             - Dano — fórmula específica por arma usando o atributo chave (ex.: Espada longa: 10 + 150% do atributo; Broquel: 20 + 100% do atributo).
             - Cadência — ataques por segundo (APS) calculados com base na Destreza (ex.: Espada longa: 0,8 APS + 0,1 por ponto de Destreza; Broquel: 1,5 APS + 0,2 por ponto de Destreza).
             - Tipo de projétil — define o comportamento visual/funcional (corte, tiro, laser etc.).
             - Quantidade de projéteis — número de projéteis emitidos por ataque.
             - Precisão — determina o desvio aplicado aos disparos (exibido ao jogador em níveis descritivos como “alto”, “baixo”).
             - Habilidade — descrição da habilidade especial da arma.
             - Recarga da habilidade — tempo (s) para reutilizar a habilidade da arma.
             - Raridade — categoria de raridade do item.

          - **Classificação das habilidades**
             - Habilidades de combate — tempo de recarga congela fora de combate; não podem ser ativadas enquanto o estado do jogador for “fora de combate”.
             - Habilidades de aventureiro — tempo de recarga continua contando durante o combate, mas não podem ser ativadas enquanto o estado do jogador for “em combate”.
             - A recarga só começa após o término completo do efeito da habilidade (quando aplicável).

          - **Atributos de equipamentos (armaduras/acessórios)**
             - Podem conceder qualquer combinação dos atributos listados acima.
             - Habilidade ativa/passiva opcionais, cada uma com possível tempo de recarga próprio.
             - Raridade define poder base e frequência de drop.

          - **Exibição na interface**
             - Inventário: painel esquerdo exibe atributos do personagem; painel direito mostra slots de armadura/arma/mochila.
             - HUD padrão (inventário fechado): mostra vida e armadura; atributos detalhados permanecem acessíveis apenas abrindo o inventário.
             - Alguns atributos podem ter componentes internos adicionais não expostos ao jogador (por exemplo, valores intermediários ou classes derivadas); detalhes ficarão no diagrama UML durante a fase de implementação.

4. Estados de jogo
    - **4.1 Menu principal / Hub interativo**
       - Objetivo: servir como hub inicial onde o jogador controla o personagem, acessa opções, interage com NPCs/menu e inicia novas runs.
       - Entrada: início do jogo (se não houver checkpoint salvo); retorno após morte ou conclusão de uma run; saída manual da tela de configurações.
       - Saída: atravessar a porta principal inicia a run; acessar configurações; acessar outras áreas do hub (quando desbloqueadas).
       - Elementos chave: HUD reduzido (opções principais), música ambiente do hub, NPCs/metaprogressão (futuro), indicação do checkpoint/fogueira ativa.

    - **4.2 Gameplay ativa (salas de combate/exploração)**
       - Objetivo: enfrentar inimigos, limpar salas, coletar loot e avançar pelos biomas.
       - Entrada: atravessar porta que leva a sala com inimigos ou áreas de exploração.
       - Saída: limpar sala e escolher nova porta; encontrar sala especial; morrer (transição para 4.6); alcançar fogueira/checkpoint.
       - Elementos chave: HUD completo, música do bioma, spawn de inimigos, sistema de loot, renderização de salas vizinhas limitada.
       - Observações adicionais:
         - Renderização: sala atual + salas adjacentes e adjacentes das adjacentes; salas descobertas fora desse raio permanecem em estado “desrenderizado” com dados armazenados de forma leve até o jogador se aproximar novamente.
         - Visão do jogador cobre somente a sala atual; salas ao redor ficam escuras e revelam conteúdo apenas ao chegar perto da porta.
         - Inimigos seguem mesma lógica de renderização/ativação para economizar processamento.

    - **4.3 Salas especiais (loja/forja/puzzle/apoio/acampamento)**
       - Objetivo: permitir interações específicas sem combate (comprar itens, forjar, resolver puzzle, conversar com NPC, ativar checkpoint).
       - Entrada: atravessar porta que leva a sala marcada como especial.
       - Saída: sair pela mesma porta (ou porta adicional) após concluir interação; retorno à gameplay ativa.
       - Elementos chave: interfaces dedicadas (loja, forja, puzzle), música/ambiente diferenciados, ausência de combate.
       - Sala de acampamento:
         - Contém fogueira apagada e banco; gastar moedas acende fogueira permanentemente para aquela run (e habilita checkpoint).
         - Sentar no banco: recupera vida, registra checkpoint para salvar e sair.
         - Ao carregar save, o jogador reaparece na última fogueira ativada e acesa.

    - **4.4 Sala de chefe**
       - Objetivo: derrotar o chefe para liberar novo bioma/área e obter loot especial.
       - Entrada: atravessar porta especial sinalizada como chefe.
       - Saída: vitória → escolha de nova porta/bioma; derrota → transição para 4.6.
       - Elementos chave: música temática intensa, telegraphs visuais, portas seladas durante a luta.

    - **4.5 Tela de pausa / menu in-run**
       - Objetivo: pausar a ação, acessar configurações, abandonar run ou iniciar processo de salvar e sair.
       - Entrada: hotkey dedicada (padrão "P").
       - Saída: retomar gameplay (4.2/4.3/4.4); confirmar abandono (→ 4.1); acessar configurações (4.7); iniciar “salvar e sair” (ver estado 4.9).
       - Elementos chave: jogo congelado, sobreposição de UI com opções; botão “salvar e sair” fica bloqueado durante combate ou fora de raio de checkpoint.

    - **4.6 Tela de pós-run / resultados**
       - Objetivo: apresentar estatísticas da run, loot persistente (quando houver) e opções de retorno ao hub.
       - Entrada: morte do jogador, abandono voluntário, conclusão especial (futuro).
       - Saída: confirmar retorno → 4.1; acessar metaprogressão (quando implementado).
       - Pendências: definir estatísticas exibidas, animação de transição e recompensas permanentes (será tratado após planejamento das demais seções).

    - **4.7 Tela de configurações**
       - Objetivo: ajustar áudio, vídeo, controles e acessibilidade.
       - Entrada: opção no hub (4.1) ou na pausa (4.5).
       - Saída: confirmar/voltar → retorna ao estado anterior (hub ou gameplay/pausa).
       - Elementos chave: menus de slider, remapeamento de teclas, pré-visualização de HUD.

    - **4.8 Créditos / cutscenes (futuro)**
       - Objetivo: exibir narrativa, créditos ou eventos especiais.
       - Entrada: opção no menu ou gatilhos narrativos (futuro).
       - Saída: finalizar exibição → retorna ao hub ou próximo estado previsto.
       - Pendências: avaliar necessidade no protótipo; definir formato (estático, animação, script in-engine). Mantido para futuros finais secretos/alternativos.

    - **4.9 Estado de checkpoint / salvar e sair**
       - Objetivo: transicionar o personagem para condição de descanso em fogueira e permitir salvar a run atual (checkpoint persistente).
       - Entrada: opção “salvar e sair” a partir da pausa (4.5) quando o jogador estiver em uma sala com fogueira acesa ou após teleporte automático para a fogueira mais próxima.
       - Saída: jogador escolhe “sair” (fecha jogo) ou “jogar” (retorna para gameplay na fogueira). Ao relançar o jogo com checkpoint ativo, o jogo inicia diretamente neste estado (sem passar pelo menu) e só volta ao hub se o jogador optar por abandonar a run.
       - Restrições: indisponível durante combate; botão aparece desabilitado com feedback visual.
       - Elementos chave: HUD minimalista (botões “jogar” e “sair”), animação de personagem sentado no banco, fogo ativo indicando checkpoint salvo.

5. Inputs e controles
    - **5.1 Mapeamento padrão (teclado + mouse)**
       - Movimento: `W`/`A`/`S`/`D` (top-down isométrico).
       - Ataque principal (mão esquerda): botão esquerdo do mouse. Se o cursor estiver sobre entidade interagível, a interação tem precedência.
       - Ataque secundário (mão direita): botão direito do mouse (mesma lógica de precedência para interação).
       - Habilidades de arma: `R` (mão direita) e `T` (mão esquerda).
       - Habilidades de armadura/itens ativos: teclas `1` a `5`.
       - Interagir: `E` (além do clique direto no objeto com qualquer botão do mouse).
       - Inventário: `I` (abre UI completa).
       - Pausa / menu in-run: `P`.

    - **5.2 Personalização de controles**
       - Todos os comandos (teclado e mouse) poderão ser remapeados pelo jogador na tela de configurações.
       - Ao remapear, conflitos serão sinalizados e o jogador deverá confirmar/substituir manualmente.
       - Atalhos e botões também serão apresentáveis no HUD (cliques virtuais replicam as teclas/slots).

    - **5.3 Considerações adicionais**
          - Suporte a controle analógico não está previsto para o protótipo inicial (pode ser avaliado posteriormente).
          - Acessibilidade prevista:
             - Alternância nas armas entre “clique único” e “segurar para disparar”, configurável em opções.
             - Coleta automática baseada em proximidade: itens/moedas são coletados ao encostar na hitbox (não requer botão extra); raio da coleta será aumentável por meio de alguns itens (e melhorias quando a metaprogressão ser adicionada).
             - Feedback visual/auditivo configurável (intensidade de flashes, volume de efeitos), pendente detalhar futuramente.

6. Dados e persistência
    - **6.1 Save files e estrutura geral**
       - Saves offline sem integração online. Manter estrutura interna em JSON pela flexibilidade de depuração.
       - Arquivos serão serializados em JSON e, antes de gravar em disco, serão protegidos com criptografia simétrica ChaCha20-Poly1305 (via libsodium ou implementação equivalente). O algoritmo oferece excelente performance em CPUs modernas (inclusive sem instruções AES) e já inclui autenticação integrada.
       - Arquivo(s) principais:
         - `save_run.json`: dados da run atual (estado do jogador, bioma, salas visitadas, inventário temporário, checkpoint ativo).
         - `save_meta.json`: metaprogressão (blueprints permanentes, habilidades desbloqueadas, upgrades do hub).
         - `config.json`: preferências de usuário (áudio, vídeo, remapeamento de controles, opções de acessibilidade).
       - Estrutura deve ser extensível para futuras expansões (versão do arquivo, migrações simples).

    - **6.2 Eventos de escrita**
       - Sentar em fogueira/acampamento (checkpoint): atualiza `save_run.json` com estado completo da run, incluindo sala atual e recursos temporários.
       - Ajustar configurações: persistir imediatamente em `config.json` após confirmar/fechar menu de opções.
       - Metaprogressão: ao comprar/desbloquear algo no hub ou receber blueprint após run (morte/conclusão), salvar `save_meta.json`.
       - Game over: limpar dados de run (remover/zerar `save_run.json`) mas manter metaprogressão adquirida.
       - “Salvar e sair”: só disponível quando o jogador senta em uma fogueira acesa; grava `save_run.json` e encerra aplicação com segurança (não há teleporte automático para fogueiras).

   - **6.3 Proteções e comportamento em falhas**
       - Fechar o jogo abruptamente (Alt+F4, fechar janela) durante run cancela progresso não salvo; exibir aviso no HUD ao detectar tentativa de fechamento sem usar “salvar e sair”.
       - Gravar por etapas: escrever em arquivo temporário (`.tmp`) e renomear após sucesso para evitar corrupção (transação simples).
       - Validar integridade e versão dos arquivos na leitura; fallback para estados padrões se corrompidos.
       - Anti-manipulação e segurança:
       - JSON é mantido internamente, mas o conteúdo no disco estará cifrado com ChaCha20-Poly1305. Cada gravação usa nonce/IV único e gera tag de autenticação; o executável armazena a chave simétrica (ofuscada) e pode incorporar um salt derivado do identificador de máquina/opção do usuário.
       - Além da autenticação fornecida pelo Poly1305, registrar hash (SHA-256) do payload antes da cifragem para diagnósticos opcionais (ex.: comparar saves antigos).
       - Para builds de depuração, permitir flag que desabilita a cifragem para facilitar inspeção manual.

    - **6.4 Leitura de dados**
       - Na inicialização: verificar se existe `save_run.json` válido; se sim, iniciar no estado 4.9 (checkpoint) em vez do hub.
       - Carregar `config.json` antes de abrir janela/renderização para aplicar resoluções e mapeamentos.
       - Carregar `save_meta.json` ao entrar no hub para disponibilizar upgrades/unlocks.

    - **6.5 Pendências**
       - Documentar esquema detalhado de cada arquivo (campos, tipos, versões) e criar utilitário de migração compatível com a camada de criptografia.
       - Definir processo de geração/armazenamento da chave ChaCha20 (ex.: derivada de seed fixa + salt por usuário) e estratégia para ofuscar a chave dentro do binário.
       - Planejar rotina de backup automático “último save válido”: ao salvar, copiar arquivo atual para `save_run_backup.bin` (já cifrado) antes de sobrescrever; na próxima inicialização, se `save_run.json` estiver corrompido ou ausência registrada por crash, perguntar ao jogador se deseja restaurar o backup. Regras: backup só é oferecido se o jogo detectar encerramento inesperado; encerramentos deliberados (menu sair) limpam backup. Avaliar viabilidade de detectar crash versus fechamento normal.

7. Balanceamento inicial
   - **7.1 Diretrizes gerais**
      - Objetivo desta seção: definir valores de referência suficientes para iniciar playtests internos e medir sensação de combate/economia sem travar por falta de números.
      - Utilizar números simples (múltiplos de 5 ou 10) para facilitar ajustes rápidos nos primeiros protótipos.
      - Cadência passa a ser expressa em ataques por segundo (APS), o que evita chegar a 0 de intervalo e simplifica comparações.
      - Todos os valores estão sujeitos a revisão após os primeiros testes de sala (meta: validar em “Sala Básica 01” com 3 ondas).

   - **7.2 Valores base do jogador**
      - Atributos iniciais (antes de itens/armas) = 0 em todos os atributos principais, de ataque e secundários.
      - Estatísticas derivadas com atributos zerados:
         - Vida máxima: 100 HP (alterada diretamente por Vigor: +12 HP por ponto quando implementado).
         - Armadura inicial: 0 (só aumenta via equipamentos/passivas).
         - Velocidade de movimento: 250 px/s (valor inspirado em twin-stick top-down). Fórmula: `velocidade_final = velocidade_base × (1 + 0,03 × Velocidade)` limitada a +90% para evitar exageros iniciais.
         - Cadência das armas: `APS_final = APS_base + ganho_por_ponto × Destreza`, limitado por um teto por arma (padrão 3,5 APS até revisão). Armas podem sobrepor modificadores próprios.
      - Loadout do Cavaleiro (protótipo de personagem inicial):
         - Arma primária — Espada longa: dano exibido `12 + (1,5 × ac)`, atributo chave Força, cadência `APS = 0,8 + 0,1 × Destreza`, precisão ótima, critério de Letalidade interno: chance base 8%, +0,6% por ponto, multiplicador crítico +30%.
         - Arma secundária — Broquel reforçado: dano `10 + (1,5 × ac)`, atributo chave Constituição, cadência `APS = 1,5 + 0,2 × Destreza`, precisão ótima, passiva +5 Defesa fixa, Letalidade base 5% com ganho de +0,5% por ponto e multiplicador crítico +20% de dano.
         - Armadura — Cota de malha incomum: +2 Defesa, +2 Vigor, +5% Redução de dano. Rareza verde (incomum).
      - Resultado “prático” com esse loadout: Vida 124 (100 + 2×12), Defesa efetiva ~7% (5 da passiva + 2 da armadura em fórmula log), cadência inicial espada 0,8 APS, broquel 1,5 APS, dano base 12–10 (antes dos atributos).

   - **7.3 Economia e custos iniciais**
      - Fórmula base de preço na loja (itens temporários da run): `preço = 20 + 20 × (tier_raridade)` onde tier comum = 0, incomum = 1, raro = 2, épico = 3, lendário = 4, mítico = 5.
      - Poção de cura comum: 20 moedas (cura 40 HP).
      - Upgrade temporário na forja (chance +10%) custa 15 moedas por tentativa.
      - Reforjar (re-roll) ainda indisponível no protótipo; custo pendente.
      - Sala de acampamento (ativar fogueira): 60 moedas para acender (pendente validar se valor não trava progressão).

   - **7.4 Inimigos e IA**
      - **Modelo de atributos fixos**
         - Vida máxima: definida diretamente por inimigo (não deriva de Vigor).
         - Velocidade de deslocamento: valor absoluto em px/s.
         - Defesa: porcentagem de mitigação via fórmula global (compartilha curva do jogador) aplicada ao valor fixo configurado.
         - Cadência (APS): valor direto configurado na ficha do inimigo (sem escalonar com Destreza).
         - Ataques: lista dos golpes disponíveis com dano base, tipo (melee/projétil/dash/etc.) e cooldowns internos.
         - Comportamento de IA: referência para a classe/estado que rege decisões (perseguição, kite, dash, suporte, etc.).
         - Projéteis: parâmetros ficam na classe de projétil compartilhada (velocidade, lifespan, homing, ricochete). O inimigo apenas instancia o projétil correto.
      - **Arquitetura recomendada de código**
         - Classe base `EnemyBase` com atributos fixos acima, hooks para atualizar/atacar e ponteiros para comportamento/projétil.
         - Classes derivadas de comportamento (ex.: `EnemyMelee`, `EnemyRanged`, `EnemyDasher`, `EnemySummoner`) encapsulam lógica específica e reutilizam funções comuns (pathfinding, telegraph, cooldowns).
         - Cada inimigo concreto herda da classe do padrão dominante e sobrescreve apenas valores e habilidades próprias.
      - **Inimigos protótipo para teste**
         - **Espectro Ladino (melee rápido)** — HP 70, dano 12 por golpe, velocidade 240 px/s, cadência 0,83 APS. IA: `EnemyMelee` com prioridade em dash curto quando sem linha reta. Drop: 6 moedas, 15% poção comum.
         - **Arqueiro Etéreo (ranged)** — HP 55, projéteis 10 de dano, velocidade 200 px/s, cadência média 0,71 APS em rajadas de 3 tiros (delay 0,3s). IA: `EnemyRanged` com manutenção de distância mínima. Drop: 8 moedas, 10% flecha elemental.
      - **Escalonamento por andar/bioma**
         - Para cada andar, aplicar multiplicador cumulativo a HP e dano: `escala = 1 + 0,20 × (andar_atual - 1)` (ajustável por bioma).
         - A partir do 2º andar, introduzir chance de inimigos "elite" (ex.: 5% base, +5% por andar). Elites são variantes recoloridas com brilho/contorno específico.
         - Elites aplicam modificadores focados (ex.: +30% HP, +25% dano, ou +40% velocidade, ou +50% APS). Cada inimigo define um pacote de elites permitido.
         - Drops de elites podem incluir mais moedas e chance extra de item raro para compensar a dificuldade.
      - **Próximos passos**
         - Definir tabela completa de inimigos por bioma usando este formato.
         - Documentar parâmetros extras das classes derivadas (distância ideal, ângulo de ataque, cooldown global) quando começarmos o código.

      - **Fichas iniciais por bioma (exemplos fornecidos)**
         - **Dungeon**
            - `Esqueleto` (frágil e veloz)
               - Vida máxima: 40
               - Velocidade: 260 px/s
               - Defesa: 2
               - Cadência (APS): 0,9
               - Alcance de ataque: 220 px (configurável)
               - Ataques: Flechada — projétil em direção ao jogador (dano 8)
               - IA: corre até o alcance de ataque, inicia animação de ataque (3s) — durante a animação dispara o projétil no início e permanece imóvel pelos segundos restantes; ao fim da animação, caminha na direção oposta por 2s e reinicia o loop.
               - Drop: 6 moedas, 15% poção comum.

            - `Executor` (forte)
               - Vida máxima: 140
               - Velocidade: 160 px/s
               - Defesa: 8
               - Cadência (APS): 0,6
               - Alcance de ataque: 80 px (melee)
               - Ataques: Golpe de machado — corte frontal (dano 28)
               - IA: anda em direção ao jogador, canaliza 0,5s e executa golpe em forma de corte (usa padrão de projétil tipo Corte). Depois fica 0,5s parado antes de reiniciar.
               - Drop: 18 moedas, 10% item incomum.

            - `Torturador` (gordo)
               - Vida máxima: 220
               - Velocidade: 110 px/s
               - Defesa: 12
               - Cadência (APS): 0,4
               - Alcance de ataque (gancho): 600 px (projétil gancho)
               - Alcance de ataque (maça): 160 px (giro)
               - Ataques:
                  - Gancho — projétil em cadeia que puxa o jogador (dano 20 ao impacto; puxamento proporcional à distância)
                  - Maça — giro em área ao redor do Torturador (dano 18 por hit)
               - IA: padrão inicia com tentativa de Gancho (gira por 3s e dispara); se acertar, puxa o jogador para perto (com dano) e então passa a apenas atacar com a maça: quando jogador entra em alcance, canaliza 1s e gira a maça 3x; então volta a se mover.
               - Drop: 35 moedas, 25% chance de recurso raro.

         - **Caverna**
            - `Morcego` (frágil e ágil)
               - Vida máxima: 30
               - Velocidade: 320 px/s
               - Defesa: 1
               - Cadência (APS): 1,2
               - Alcance de ataque (dash): 220 px
               - Ataques: Dash — mergulho rápido que causa dano 10 ao contato
               - IA: patrulha em padrões circulares próximos ao jogador; quando CD de ataque terminar, espera 0,5s e mergulha em direção ao jogador.
               - Drop: 4 moedas, 10% material.

            - `Toupeira` (mineradora, visual cyberpunk)
               - Vida máxima: 80
               - Velocidade: 140 px/s
               - Defesa: 4
               - Cadência (APS): 0,5
               - Alcance de ataque: 400 px
               - Ataques: Canhão de braço — projétil carregado que causa 20 de dano
               - IA: igual ao Esqueleto (corre até o alcance, animação longa ao atirar), mas com recarga maior, maior alcance e movimento mais lento.
               - Drop: 10 moedas, 12% chance de material raro.

            - `Minhoca Gigante`
               - Vida máxima: 300
               - Velocidade: 100 px/s (movimento por “tiles”/passos)
               - Defesa: 10
               - Cadência (APS): 0,3 (apenas dano ao contato)
               - Alcance de ataque: contato físico (hitbox contínuo)
               - Ataques: dano por contato — 15 por segundo enquanto em contato
               - IA: movimenta-se em segmentos (tipo snake) avançando uma distância fixa antes de virar; vira na direção que aproxima do jogador quando possível; limitado a movimentos ortogonais (N/S/E/W). Puxa o corpo atrás como uma snake.
               - Drop: 40 moedas, 15% chance de blueprint básico.

         - **Mansão**
            - `Cachorro` (cão de guarda)
               - Vida máxima: 60
               - Velocidade: 300 px/s
               - Defesa: 3
               - Cadência (APS): 1,0
               - Alcance de ataque (avanço): 200 px
               - Ataques: Avanço — investida que causa 14 de dano ao acertar
               - IA: similar ao Morcego, mas patrulha em linha reta em direção ao jogador (não circula)
               - Drop: 8 moedas, 8% material.

            - `Guarda` (armadura pesada)
               - Vida máxima: 180
               - Velocidade: 140 px/s
               - Defesa: 14
               - Cadência (APS): 0,55
               - Alcance de ataque: 90 px
               - Ataques: Golpe com espada longa — corte frontal (dano 26)
               - IA: similar ao Executor, porém mais lento; canaliza 0,7s antes do golpe e tem pequena reação de recuo pós-ataque.
               - Drop: 2–6 moedas (aleatório), 12% item raro.

            - `Nobre` (revolver)
               - Vida máxima: 95
               - Velocidade: 180 px/s
               - Defesa: 6
               - Cadência (APS): 0,75 (rajadas de 3)
               - Alcance de ataque: 420 px
               - Ataques: Rajada de 3 tiros — projéteis (cada 8 dano)
               - IA: igual ao Esqueleto (corre até o alcance de ataque, executa animação de 3s disparando em rajada) com comportamento de recuo por 2s após a ação.
               - Drop: 22 moedas, 15% chance de munição especial.

      - **Drops e moedas (regra global)**
         - Drops por inimigo:
            - Chance de dropar um item comum da região: 10%.
            - Chance de dropar um item incomum da região: 1%.
            - Essas chances são independentes e aplicadas por inimigo ao morrer; itens específicos podem ter suas próprias regras.
         - Moedas:
            - Cada inimigo deve definir um intervalo (min,max) de moedas a dropar; no spawn de drop escolhe-se um valor aleatório inteiro dentro do intervalo.
            - Exemplo: `Guarda` dropará entre 2 e 6 moedas. Valores devem ser pequenos em inimigos menores e escalonarem com HP/dificuldade.
         - Elites podem acrescentar multiplicadores às chances de drop e ao número de moedas (ex.: +50% moedas, +10% chance rara).
         - Observação de implementação: como os NPCs serão hardcoded (classe derivada por inimigo), a implementação do drop pode residir no método `onDeath()` da `EnemyBase` e usar dados do inimigo (intervalo de moedas, tabelas regionais) para gerar os drops.

      - **NPCs/hardcode vs data-driven**
         - Decisão: por agora, os inimigos serão implementados como classes hardcoded (uma classe derivada por tipo), evitando a camada extra de CSV/JSON. Isso reduz processamento e complexidade inicial.
         - Mesmo assim, manteremos campos de configuração (constantes estáticas ou struct inicializadora) por inimigo para facilitar ajustes futuros e permitir migração posterior para data-driven se desejado.


   - **7.5 Armas protótipo (exibição para o jogador)**
      - Nota geral: as armas não concedem pontos diretos de Letalidade; apenas definem parâmetros de chance e multiplicador crítico aplicados sobre o atributo atual do jogador.
   - Campos padrão por arma: atributos de combate listados abaixo, `preço` (valor base em moedas calculado como `30 × tier_de_raridade`, começando em 30 para comum) e `biomas` (lista de biomas onde pode surgir/vender).
      - `Espada Longa` — comum (cinza claro)
         - Atributo-chave: Força
         - Dano exibido: `12 + (1,5 × ac)`
         - Cadência: `APS = 0,8 + 0,1 × Destreza` (teto sugerido 2,5 APS)
         - Tipo de arma: Corte
         - Precisão: Ótima
         - Habilidade ativa (combate): **Corte circular** — gira a espada 4 vezes atingindo 360° com dano normal; recarga 20s (contagem congela fora de combate)
         - Habilidade passiva: —
         - Letalidade (parâmetros de crítico): 8% de chance base, +0,6% por ponto de Letalidade, multiplicador +30%
         - Preço: 30 moedas (tier comum)
         - Biomas: Caverna, Dungeon (placeholder)

      - `Broquel` — incomum (verde)
         - Atributo-chave: Constituição
         - Dano exibido: `10 + (1,5 × ac)`
         - Cadência: `APS = 1,5 + 0,2 × Destreza` (teto sugerido 3 APS)
         - Tipo de arma: Força bruta
         - Precisão: Ótima
         - Habilidade ativa (combate): **Posição de guarda** — 10s sem atacar com o escudo, mitigando 100% dos próximos 2 ataques; recarga 60s
         - Habilidade passiva: **Protegido** — +5 Defesa fixa
         - Letalidade: 5% base, +0,5% por ponto, multiplicador +20% de dano crítico
         - Preço: 60 moedas (tier incomum)
         - Biomas: Dungeon, Mansão (placeholder)

      - `Grimório` — incomum (verde)
         - Atributo-chave: Misticismo
         - Dano exibido: `5 + (1,25 × ac) × 3` (mostrado como “x3 projéteis”)
         - Cadência: `APS = 1,0 + 0,05 × Destreza` (teto sugerido 2 APS)
         - Tipo de arma: Projéteis
         - Precisão: Medíocre
         - Habilidade ativa: —
         - Habilidade passiva (combate): **Mana ardente** — a cada 5 ataques, dispara 1 projétil único com 125% do dano total normal e maior precisão
         - Letalidade (parâmetros de crítico): 6% de chance base, +0,4% por ponto de Letalidade, multiplicador +25%
         - Preço: 60 moedas (tier incomum)
         - Biomas: Caverna, Mansão (placeholder)

      - **Observação:** valores de Letalidade marcados como pendentes precisam ser confirmados na tabela final para manter consistência.

   - **7.6 Equipamentos protótipo (exibição para o jogador)**
      - Campos padrão: atributos listados, habilidades ativas/passivas quando existirem, `preço` em moedas e `biomas` onde podem aparecer/vender.
      - `Chapéu do Aventureiro` — raro (azul)
         - Atributos: +2 Vigor, +5 Sorte
         - Habilidade ativa: —
         - Habilidade passiva: —
         - Preço: 220 moedas (placeholder)
         - Biomas: Caverna, Mansão (placeholder)

      - `Capa do Hemomante` — épico (roxo)
         - Atributos: +5 Vampirismo, +5 Letalidade
         - Habilidade ativa: —
         - Habilidade passiva: **Colheita** — inimigos mortos podem deixar orbe de sangue; cada orbe coletado concede +2 Poder (acumula até 5, dura até o fim do combate atual)
         - Preço: 340 moedas (placeholder)
         - Biomas: Dungeon, Mansão (placeholder)

      - `Pedra Lunar` — raro (azul)
         - Atributos: +2 Misticismo, +2 Inteligência
         - Habilidade ativa (aventureiro): **Sensitivo** — revela o tipo de sala atrás de portas trancadas; recarga 560s (não congela em combate, mas habilidade não pode ser usada durante combate)
         - Habilidade passiva: —
         - Preço: 260 moedas (placeholder)
         - Biomas: Mansão (placeholder)

      - `Ponta de Aço` — incomum (verde)
         - Atributos: +2 Velocidade
         - Habilidade ativa (combate): **Pontapé** — avança até inimigo próximo causando 10 de dano; cura 10 se matar o alvo; recarga 10s
         - Habilidade passiva: —
         - Preço: 180 moedas (placeholder)
         - Biomas: Dungeon, Caverna (placeholder)

   - **7.7 Fórmulas & escalas provisórias**
      - Dano final de arma: `dano = dano_base + (dano_base × 0,05 × atributo_chave)` até limite de +200%. Armas poderão ajustar coeficientes próprios.
   - Cadência (APS): `APS_final = min(APS_base + ganho_por_ponto × Destreza, APS_teto_da_arma)`. APS_teto padrão = 4 salvo exceções listadas por arma; itens específicos podem elevar esse teto.
      - Redução de dano por Defesa: `mitigação = defesa / (defesa + 100)` (retornos decrescentes). Ex.: 10 Defesa ≈ 9%.
      - Letalidade: `chance_crítico = min(chance_base + ganho_por_ponto × Letalidade, 75%)`. Multiplicador crítico padrão = `1 + bônus_crítico_da_arma`. Valores específicos por arma definidos na subseção 7.5.
      - Vampirismo: chance (%) = valor do atributo; cura = 2% da vida máxima (mínimo 1). Cooldown interno 2s.
      - Sorte: aumenta chance de loot em `1% por ponto`, aplicado após chance base.
      - Alcance de coleta: raio = 120 px + (8 px × ponto).
      - Velocidade de projéteis inimigos: será tabelada com atributos ocultos (pendente protótipo).
      - Recarga de habilidades: contagem inicia somente após término do efeito; habilidades de combate congelam recarga fora de combate; habilidades de aventureiro continuam contando independente do estado.

   - **7.8 Atributos ocultos e observações de implementação**
      - Além dos valores apresentados ao jogador, cada arma terá parâmetros internos (tamanho/hitbox de projétil, lifespan/distância, ricochetes, velocidade, homing, knockback). Permanecem definidos diretamente no código/dados internos até decidirmos formato de exposição.
      - Quantidade de projéteis será representada junto ao dano exibido (ex.: `5 + 125% ac × 3`).
      - `Tipo de arma` controla modelo/animação de projétil: Corte (cone curto), Força bruta (onda linear com hitbox larga), Projétil (objeto que viaja até o mouse), Laser (impacto instantâneo). Novos tipos serão adicionados futuramente.
      - Mapeamento de cores por raridade: comum (cinza claro), incomum (verde), raro (azul), épico (roxo), lendário (amarelo), mítico (vermelho escuro).

   - **7.9 Pendências imediatas**
      - Confirmar valores de Letalidade para Espada Longa e Grimório (sugestões registradas acima).
      - Medir sensação real da velocidade de 250 px/s e dos APS propostos na sala protótipo; ajustar se parecerem lentos/rápidos demais.
      - Definir dano crítico mínimo/máximo por arma (variação randômica) e comunicar ao jogador, se aplicável.
      - Preencher tabela de inimigos adicionais (tanque lento, suporte) e ampliar lista de armas/equipamentos com raridades superiores.
      - Validar custo de fogueira vs. geração média de moedas por sala (~18 moedas estimadas; requer dados reais).
      - Especificar formatos de tabela (CSV/JSON) para alimentar esses valores no jogo.

   - **7.10 Bosses protótipo (1 por bioma)**
      - Nota geral: cada boss será implementado como uma classe `Boss` que herda de `EnemyBase` (ou de uma subclasse do padrão de IA apropriada). Bosses têm várias fases, barras de vida explícitas na UI, trilha sonora dedicada e drops múltiplos/raros.

      - **Dungeon — Senhor dos Ossos** (boss esquelético, tema necromântico)
         - Vida máxima: 1800
         - Velocidade: 120 px/s (movimenta-se com lentidão punitiva)
         - Defesa: 20
         - Cadência (APS): 0,35 (ataques pesados)
         - Mechanics / Ataques (mínimo 3):
            1. Corte Ósseo — ataque melee em cone frontal grande (dano 80).
            2. Volta de Ossos — projéteis em arco (10 projéteis de 18 dano cada) cobrindo área ampla.
            3. Chamado Necromântico — invoca 3 esqueletos menores (tipo `Espectro Ladino`) que surgem nas bordas da arena.
            4. (Fase 2) Pulsar da Ossada — ao chegar em ~50% HP, aplica um pulso que reduz temporariamente defesa do jogador e aumenta APS do boss por 12s.
         - IA: mistura de `EnemyMelee` com estados de invocação e telegrapho forte antes de ataques em área. Tem um ciclo de ações (ataque padrão → volley → invocação → pausa).
         - Drops: múltiplos itens raros/épicos (2–3 itens raros garantidos em média), blueprint, 200–350 moedas; alta chance de drop raro extra se derrotado em condição especial (por exemplo, sem invocações ativas).
         - Música: acionar `Dungeon_Boss_Theme` ao iniciar a luta; retornar à música ambiente ao término.
         - UI: barra de boss no topo com nome "Senhor dos Ossos", indicador de fase (por cor/segmento) e escala de defesa/armadura mostrada se aplicável.
         - Observações de implementação: bloquear portas da sala; iniciar com cinematics curtos (fade-in, som) e spawn controlado de adds; gerenciar limpeza de adds no término.

      - **Caverna — Matriarca das Profundezas** (verme ancestral)
         - Vida máxima: 2200
         - Velocidade: 90 px/s (deslizamento por segmentos)
         - Defesa: 18
         - Cadência (APS): 0,25 (muitos ataques em área e comportamento por segmentos)
         - Mechanics / Ataques (mínimo 3):
            1. Enterrar/Emergir — desaparece do terreno e reaparece causando onda de choque (dano 70 na área de aparecimento).
            2. Lançamento de Ácido — projéteis de ácido que causam dano por tempo (DoT) e deixam manchas no chão que persistem por Xs.
            3. Varredura de Corpo — passa o corpo em sweeps que empurram o jogador e causam dano 50 por hit; cada sweep percorre uma grande faixa.
            4. (Fase 2) Segmentos Frenéticos — segmentos avançam de forma independente por curtos bursts, criando zonas de perigo móveis.
         - IA: comportamento segmentado (tipo snake) com padrões alternados: perseguição, enterro e sweeps; telegraph visual forte antes de emergir.
         - Drops: múltiplos itens raros/épicos (1–2 itens raros garantidos + chance de blueprint), 250–400 moedas, material especial de caverna.
         - Música: acionar `Cave_Boss_Theme` durante a luta; fundo ambiente restaurado no fim.
         - UI: barra de boss com segmentos representando frações do corpo (visualmente pode mostrar segmentos quebráveis); indicador de zona segura/risco no minimapa ampliado.
         - Observações de implementação: reutilizar sistemas de projéteis para ácido e sweeps; coordenação entre segmentos para evitar colisões internas; considerar checkpoints de fase para reiniciar a luta corretamente em caso de reconnect (prototipagem local apenas).

      - **Mansão — O Barão de Vidraça** (nobre aristocrata armado, estilo elegantemente letal)
         - Vida máxima: 1600
         - Velocidade: 180 px/s
         - Defesa: 16
         - Cadência (APS): 0,6 (alternando entre pistola e ataques corpo a corpo rápidos)
         - Mechanics / Ataques (mínimo 3):
            1. Rajada Real — dispara uma sequência de projéteis em alta precisão (5 tiros com 22 dano cada).
            2. Chandelier Slam — ativa um ataque de área (objetos do cenário caem) que cria telegraph no teto (dano 90 por impacto).
            3. Convocar Guarda — invoca 2–3 `Guarda` (adds) que atacam o jogador e devem ser gerenciados.
            4. (Fase 2) Tiro Explosivo — mira no jogador e dispara um projétil que explode em área deixando estilhaços (dano secundário contínuo).
         - IA: sequência tática (mantém distância → abre com rajada → convoca adds quando HP baixa → usa ataques ambiente); alterna entre mobilidade e controle de espaço.
         - Drops: múltiplos itens raros/lendários (1–3 itens raros garantidos), 180–300 moedas, chance elevadas de munição especial/blueprint de arma.
         - Música: acionar `Mansion_Boss_Theme` com samples orquestrais; reduzir música ambiente.
         - UI: barra de boss com nome "Barão de Vidraça", marcadores de adds ativos e contador de fases; HUD exibe ícone de trilha sonora ativa.
         - Observações de implementação: bloquear saídas, travar câmera/zoom sutil para foco; adicionar pequenas animações de intro (Barão aparecendo no balcão) para dar caráter.

      - **Notas comuns a todos os bosses**
         - Implementar `BossBase : EnemyBase` com suporte a:
            - Fases por limiar de HP (lista de thresholds e handlers por fase).
            - Gerenciamento de adds (spawn, limite ativo, cleanup ao morrer).
            - Sistema de trilha sonora (play/stop com crossfade) e interface para tocar `*_Boss_Theme`.
            - Gatilhos de UI para criar barra de vida de boss, nome e indicadores de fase.
            - Drops multi-item: método `onDeath()` deve compor chest ou múltiplos spawns de drop com base em regras de raridade e multiplicadores de elite.
         - Recomendações de balanceamento: testar cada boss em isolamento em sala de prova com 3 runs; ajustar HP/dano/fases até que tempo médio de luta fique entre 60–180s para o protótipo.
         - Considerar salvar um pequeno registro pós-morte (por ex.: tempo para matar, número de adds feitos) para análise de balance.

8. Riscos e testes necessários
   - Itens de maior incerteza técnica ou de design
   - Protótipos sugeridos para validar hipóteses

Notas:
- Utilize diagramas ou tabelas quando ajudar na clareza.
- Atualize conforme surgir uma nova mecânica ou ajuste importante.